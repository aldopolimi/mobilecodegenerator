«REM»
Copyright 2016 Gregorio Perego, Stefania Pezzetti, Aldo Pintus
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»

«DEFINE attributesDeclarations FOR ViewController-»
«FOREACH audioPlayers AS ap-»
private FloatingActionButton «ap.id»PlayButton;
private FloatingActionButton «ap.id»PauseButton;
private FloatingActionButton «ap.id»StopButton;
private MediaPlayer «ap.id»;
«ENDFOREACH-»
«IF audioRecorder!=null-»
private Button recordButton;
private MediaRecorder audioRecorder;
private String recordedAudioPath;
private boolean isRecording = false;
private static final int REQUEST_CODE_RECORD_AUDIO = 400;
«ENDIF-»
«ENDDEFINE-»

«DEFINE onCreate FOR ViewController-»
«IF audioRecorder!=null-»
//Request permissions to record audio at runtime ONLY for API >= 23
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
	requestPermissions(new String[]{
					Manifest.permission.RECORD_AUDIO},
					REQUEST_CODE_RECORD_AUDIO);
} else {
	setUpRecorder();
}
«ENDIF-»
«ENDDEFINE-»

«DEFINE audio FOR ViewController-»
«IF audioRecorder!=null-»
@Override
public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
	switch (requestCode) {
		case REQUEST_CODE_RECORD_AUDIO: {
			if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
				setUpRecorder();
			} else {
				//No permissions
				Toast.makeText(this, "Permission to record has been denied", Toast.LENGTH_SHORT).show();
			}
			return;
		}
	}
}

private void setUpRecorder() {
	recordButton = (Button) this.findViewById(R.id.«audioRecorder.id»);
	recordButton.setText("Rec");
	recordButton.setOnClickListener(new OnClickListener() {
	    public void onClick(View v) {
	        if (!isRecording) {	//start recording
	        	String audiosPath = getFilesDir().getAbsolutePath() + "/audios";
			    File audiosDirectory = new File(audiosPath);
			    audiosDirectory.mkdir();
			    String filename = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date())+".mp3";
			    String localAudioPath = audiosPath+"/"+filename;
				recordedAudioPath = localAudioPath;
        
	        	audioRecorder = new MediaRecorder();
	            audioRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
	            audioRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
	            audioRecorder.setOutputFile(recordedAudioPath);
	            audioRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
	            try {
	                audioRecorder.prepare();
	                audioRecorder.start();
	            }
	            catch (IOException e) {
	            	// TODO Auto-generated catch block
	            	e.printStackTrace();
	            }
	        	recordButton.setText("Stop");
	        }
	        else {	//stop recording
	        	audioRecorder.stop();
	            audioRecorder.release();
	            audioRecorder = null;
	            «IF !audioRecorder.audioPlayerId.matches("")-»
	    		try {
	    			«audioRecorder.audioPlayerId» = new MediaPlayer();
	    			«audioRecorder.audioPlayerId».setDataSource(new FileInputStream(recordedAudioPath).getFD());
	    			«audioRecorder.audioPlayerId».prepare();
	    		}
	    		catch (Exception e) {
	    			// TODO Auto-generated catch block
	    			e.printStackTrace();
	    		}
	    		«ENDIF-»
	        	recordButton.setText("Rec");
	        }
	        isRecording = !isRecording;
	    }
	});
	«IF !audioRecorder.audioPlayerId.matches("")-»
	this.«audioRecorder.audioPlayerId»PlayButton = (FloatingActionButton) this.findViewById(R.id.«audioRecorder.audioPlayerId»_playButton);
	this.«audioRecorder.audioPlayerId»PlayButton.setOnClickListener(new OnClickListener() {
	    public void onClick(View v) {
	    	if (audioRecorder != null && isRecording){ 
				audioRecorder.stop();
				audioRecorder.release();
				audioRecorder = null;
				try {
					«audioRecorder.audioPlayerId» = new MediaPlayer();
					«audioRecorder.audioPlayerId».setDataSource(new FileInputStream(recordedAudioPath).getFD());
					«audioRecorder.audioPlayerId».prepare();
					«audioRecorder.audioPlayerId».start();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				recordButton.setText("Rec");
				isRecording = false;
			}
			else if(«audioRecorder.audioPlayerId»!=null){
	    		«audioRecorder.audioPlayerId».start();
	    	}
	    }
	});

	this.«audioRecorder.audioPlayerId»PauseButton = (FloatingActionButton) this.findViewById(R.id.«audioRecorder.audioPlayerId»_pauseButton);
	this.«audioRecorder.audioPlayerId»PauseButton.setOnClickListener(new OnClickListener() {
	    public void onClick(View v) {
	    	if(«audioRecorder.audioPlayerId»!=null){
	    		«audioRecorder.audioPlayerId».pause();
	    	}
	    }
	});

	this.«audioRecorder.audioPlayerId»StopButton = (FloatingActionButton) this.findViewById(R.id.«audioRecorder.audioPlayerId»_stopButton);
	this.«audioRecorder.audioPlayerId»StopButton.setOnClickListener(new OnClickListener() {
	    public void onClick(View v) {
	    	if(«audioRecorder.audioPlayerId»!=null){
		    	«audioRecorder.audioPlayerId».pause();
		    	«audioRecorder.audioPlayerId».seekTo(0);
		    }
		}
	});
	«ENDIF-»
}
«ENDIF-»
«ENDDEFINE-»

«DEFINE onResume FOR ViewController-»
«FOREACH audioPlayers AS ap-»
«IF !ap.sourceType.toString().matches("hardwareFile")-»
try {
«ap.id» = new MediaPlayer();
«ap.id».setAudioStreamType(AudioManager.STREAM_MUSIC);
«IF ap.sourceType.toString().matches("localFile")-»
«IF !ap.fileUri.matches("")-»
«ap.id».setDataSource(getAssets().openFd("«ap.fileUri»").getFileDescriptor());
«ELSE-»
«ap.id».setDataSource(getAssets().openFd("filename...").getFileDescriptor()); //TODO insert file name with extension
«ENDIF-»
«ELSEIF ap.sourceType.toString().matches("remoteFile")-»
«IF !ap.fileUri.matches("")-»
«ap.id».setDataSource("«ap.fileUri»");
«ELSE-»
«ap.id».setDataSource("http://..."); //TODO insert remote file uri
«ENDIF-»
«ENDIF-»
«ap.id».prepare();
}
catch (Exception e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}

this.«ap.id»PlayButton = (FloatingActionButton) this.findViewById(R.id.«ap.id»_playButton);
this.«ap.id»PlayButton.setOnClickListener(new OnClickListener() {
    public void onClick(View v) {
    	«ap.id».start();
    }
});

this.«ap.id»PauseButton = (FloatingActionButton) this.findViewById(R.id.«ap.id»_pauseButton);
this.«ap.id»PauseButton.setOnClickListener(new OnClickListener() {
    public void onClick(View v) {
    	«ap.id».pause();
    }
});

this.«ap.id»StopButton = (FloatingActionButton) this.findViewById(R.id.«ap.id»_stopButton);
this.«ap.id»StopButton.setOnClickListener(new OnClickListener() {
    public void onClick(View v) {
    	«ap.id».pause();
    	«ap.id».seekTo(0);
    }
});
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE-»

«DEFINE onPause FOR ViewController-»
«IF audioRecorder!=null-»
if(audioRecorder!=null) {
    audioRecorder.release();
    audioRecorder=null;
}
«IF !audioRecorder.audioPlayerId.matches("")-»
if(«audioRecorder.audioPlayerId»!=null) {
	«audioRecorder.audioPlayerId».release();
	«audioRecorder.audioPlayerId»=null;
}
«ENDIF-»
«ENDIF-»
«FOREACH audioPlayers AS ap-»
«IF !ap.sourceType.toString().matches("hardwareFile")-»
if(«ap.id»!=null) {
	«ap.id».release();
	«ap.id»=null;
}
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE-»

