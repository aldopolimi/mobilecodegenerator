«REM»
Copyright 2013 Gregorio Perego, Stefania Pezzetti
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»
«EXTENSION ios_extensions::Java»
«DEFINE main FOR Application-»

«REM»initialViewController exists only in case viewController.size>0 and is the TabBarController if menu exists and menu.menuItems>0 (HP: one of the items references the launcher VC), otherwise is the NavigatorController of the launcher VC.«ENDREM»
«FILE name+"/"+name+"/Base.lproj/Main.storyboard"-»
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
«IF viewControllers.size == 0-»
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10116" systemVersion="15E65" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES">
«ELSEIF viewControllers.size > 0 && (menu != null && menu.menuItems.size > 0) -»
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10116" systemVersion="15E65" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="TabBarControllerID">
«ELSEIF viewControllers.size > 0 && (menu == null || menu.menuItems.size <= 0) -»
«FOREACH viewControllers AS vc-»
«IF vc.launcher-»
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10116" systemVersion="15E65" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="NavigationControllerIDWithRoot«vc.name»ViewControllerID">
«ENDIF-»
«ENDFOREACH-»
«ENDIF-»
	<dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
    </dependencies>
	<scenes>
	«FOREACH viewControllers AS vc-»
	<!--«vc.name»ViewController-->
	«REM»«resetCurrentY()»«ENDREM»
	<scene sceneID="«vc.name»ViewControllerSceneID">
		<objects>
	        <viewController id="«vc.name»ViewControllerID" customClass="«vc.name»ViewController" customModule="«name»" customModuleProvider="target" sceneMemberID="viewController" automaticallyAdjustsScrollViewInsets="NO">
		        <layoutGuides>
	                <viewControllerLayoutGuide type="top" id="«vc.name»-guide-top"/>
	            	<viewControllerLayoutGuide type="bottom" id="«vc.name»-guide-bottom"/>
	            </layoutGuides>
	        	<view key="view" contentMode="scaleToFill" id="«vc.name»ViewID">
	        		<rect key="frame" x="0.0" y="0.0" width="414" height="736"/>
	                <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
	                <subviews>
	                    «FOREACH vc.imageViews AS iv-»
	                    <imageView userInteractionEnabled="NO" contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" «IF iv.sourceType.toString().matches("localFile") && !iv.fileUri.matches("")-»image="«iv.fileUri»"«ENDIF-» id="«iv.id»">
	                        «IF iv.sourceType.toString().matches("hardwareFile")»
	                        <color key="backgroundColor" white="0.0" alpha="1" colorSpace="calibratedWhite"/>
	                        «ENDIF»
	                        «EXPAND uiControl FOR iv»
	                    </imageView>
	                    «ENDFOREACH-»
	                	«FOREACH vc.buttons AS b-»
	                    <button opaque="NO" contentMode="scaleToFill" fixedFrame="YES" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="«b.id»">
	                    	«EXPAND uiControl FOR b»
	                    	«IF !b.backgroundColor.matches("")-»
	                    	<color key="backgroundColor" red="«redFromHex(b.backgroundColor)»" green="«greenFromHex(b.backgroundColor)»" blue="«blueFromHex(b.backgroundColor)»" alpha="1" colorSpace="calibratedRGB"/>
                            «ENDIF-»
	                    	<state key="normal" title="«b.title»">
	                    		«IF !b.textColor.matches("")-»
	                        	<color key="titleColor" red="«redFromHex(b.textColor)»" green="«greenFromHex(b.textColor)»" blue="«blueFromHex(b.textColor)»" alpha="1" colorSpace="calibratedRGB"/>
	                        	«ENDIF-»
	                        </state>
	                        <state key="highlighted">
	                        	«IF !b.textColor.matches("")-»
	                        	<color key="titleColor" red="«redFromHex(b.textColor)»" green="«greenFromHex(b.textColor)»" blue="«blueFromHex(b.textColor)»" alpha="1" colorSpace="calibratedRGB"/>
	                        	«ELSE-»
	                        	<color key="titleColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
	                        	«ENDIF-»
	                    	</state>
	                    	<connections>
	                    		«IF b.clickListener!=null && b.clickListener.navigation!=null»
	                    		<segue destination="«b.clickListener.navigation.destination»ViewControllerID" kind="show" id="SegueIDFrom«b.id»To«b.clickListener.navigation.destination»ViewControllerID"/>
	                    		«ENDIF»
	                    		<action selector="«b.id»TouchUpInside:" destination="«vc.name»ViewControllerID" eventType="touchUpInside" id="«b.id»TouchUpInsideActionID"/>
	                    		<action selector="«b.id»TouchDown:" destination="«vc.name»ViewControllerID" eventType="touchDown" id="«b.id»TouchDownActionID"/>
	                        </connections>
	                    </button>
	                    «ENDFOREACH-»
	                    «IF vc.photocameraController!=null-»
	                    <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="«vc.photocameraController.id»" >
	                        «EXPAND uiControl FOR vc.photocameraController»
	                        <fontDescription key="fontDescription" type="boldSystem" pointSize="15"/>
	                        <state key="normal" title="Fotocamera"/>
                            <state key="highlighted">
                                <color key="titleColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                            </state>
	                        <connections>
	                            <action selector="openPhotoCamera:" destination="«vc.name»ViewControllerID" eventType="touchUpInside" id="«vc.photocameraController.id»TouchUpInsideActionID"/>
	                        </connections>
	                    </button>
	                    «ENDIF-»
	                    «IF vc.videocameraController!=null-»
	                    <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="«vc.videocameraController.id»" >
	                        «EXPAND uiControl FOR vc.videocameraController»
	                        <fontDescription key="fontDescription" type="boldSystem" pointSize="15"/>
	                        <state key="normal" title="Videocamera"/>
                            <state key="highlighted">
                                <color key="titleColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                            </state>
	                        <connections>
	                            <action selector="openVideoCamera:" destination="«vc.name»ViewControllerID" eventType="touchUpInside" id="«vc.videocameraController.id»TouchUpInsideActionID"/>
	                        </connections>
	                    </button>
	                    «ENDIF-»
	                    «IF vc.map != null-»
	                    <mapView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" mapType="standard" translatesAutoresizingMaskIntoConstraints="NO" id="«vc.map.id»">
                            «EXPAND uiControl FOR vc.map»
                        </mapView>
	                    «ENDIF-»
	                    «IF vc.audioRecorder!=null-»
	                    <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="«vc.audioRecorder.id»" >
	                        «EXPAND uiControl FOR vc.audioRecorder»
	                        <fontDescription key="fontDescription" type="boldSystem" pointSize="15"/>
	                        <state key="normal" title="Rec"/>
                            <state key="highlighted">
                                <color key="titleColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                            </state>
	                        <connections>
	                            <action selector="record:" destination="«vc.name»ViewControllerID" eventType="touchUpInside" id="«vc.audioRecorder.id»TouchUpInsideActionID"/>
	                        </connections>
	                    </button>
						«ENDIF-»
	                    «FOREACH vc.audioPlayers AS ap-»
	                    <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="«ap.id»">
	                    	<rect key="frame" x="«ap.posX.toInteger()»" y="«ap.posY.toInteger() + 62»" width="«ap.width.toInteger()»" height="«ap.height.toInteger()»"/>
							<autoresizingMask key="autoresizingMask" flexibleMaxX="YES" flexibleMaxY="YES"/>
	                        <subviews>
	                        	<button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="«ap.id»AudioPlayerPlayButton">
	                                <rect key="frame" x="0" y="0" width="56" height="56"/>
	                                <constraints>
                                        <constraint firstAttribute="width" constant="56" id="«ap.id»PlayWidthID"/>
                                        <constraint firstAttribute="height" constant="56" id="«ap.id»PlayHeightID"/>
                                    </constraints>
									<state key="normal" title="Play" image="play_icon.png">
	                                    <color key="titleShadowColor" white="0.5" alpha="1" colorSpace="calibratedWhite"/>
	                                </state>
	                                <connections>
	                                    <action selector="«ap.id»Play:" destination="«vc.name»ViewControllerID" eventType="touchUpInside" id="«ap.id»AudioPlayerPlayButtonTouchUpInsideActionID"/>
	                                </connections>
	                            </button>
	                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="«ap.id»AudioPlayerPauseButton">
	                                <rect key="frame" x="64" y="0" width="56" height="56"/>
	                                <constraints>
                                        <constraint firstAttribute="width" constant="56" id="«ap.id»PauseWidthID"/>
                                        <constraint firstAttribute="height" constant="56" id="«ap.id»PauseHeightID"/>
                                    </constraints>
                                    <state key="normal" title="Pause" image="pause_icon.png">
	                                    <color key="titleShadowColor" white="0.5" alpha="1" colorSpace="calibratedWhite"/>
	                                </state>
	                                <connections>
	                                    <action selector="«ap.id»Pause:" destination="«vc.name»ViewControllerID" eventType="touchUpInside" id="«ap.id»AudioPlayerPauseButtonTouchUpInsideActionID"/>
	                                </connections>
	                            </button>
	                            <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="roundedRect" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="«ap.id»AudioPlayerStopButton">
	                                <rect key="frame" x="128" y="0" width="56" height="56"/>
	                                <constraints>
                                        <constraint firstAttribute="width" constant="56" id="«ap.id»StopWidthID"/>
                                        <constraint firstAttribute="height" constant="56" id="«ap.id»StopHeightID"/>
                                    </constraints>
	                                <state key="normal" title="Stop" image="stop_icon.png">
	                                    <color key="titleShadowColor" white="0.5" alpha="1" colorSpace="calibratedWhite"/>
	                                </state>
	                                <connections>
	                                    <action selector="«ap.id»Stop:" destination="«vc.name»ViewControllerID" eventType="touchUpInside" id="«ap.id»AudioPlayerStopButtonTouchUpInsideActionID"/>
	                                </connections>
	                            </button>
	                        </subviews>
	                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
	                        <constraints>
	                        	«EXPAND ios_templates::ViewConstraints::innerConstraints FOR ap-»
	                        	<constraint firstItem="«ap.id»AudioPlayerStopButton" firstAttribute="leading" secondItem="«ap.id»AudioPlayerPauseButton" secondAttribute="trailing" constant="8" id="«ap.id»StopConst"/>
                                <constraint firstItem="«ap.id»AudioPlayerPauseButton" firstAttribute="leading" secondItem="«ap.id»AudioPlayerPlayButton" secondAttribute="trailing" constant="8" id="«ap.id»PlayConst"/>
	                        	<constraint firstAttribute="centerX" secondItem="«ap.id»AudioPlayerPauseButton" secondAttribute="centerX" id="«ap.id»CentXPauseConst"/>
	                            <constraint firstAttribute="centerY" secondItem="«ap.id»AudioPlayerPauseButton" secondAttribute="centerY" id="«ap.id»CentYPauseConst"/>
	                            <constraint firstAttribute="centerY" secondItem="«ap.id»AudioPlayerStopButton" secondAttribute="centerY" id="«ap.id»CentYStopConst"/>
	                            <constraint firstAttribute="centerY" secondItem="«ap.id»AudioPlayerPlayButton" secondAttribute="centerY" id="«ap.id»CentYPlayConst"/>	
	                        </constraints>
	                    </view>
	                    «ENDFOREACH-»
	                    «FOREACH vc.textViews AS tv-»
	                    <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" fixedFrame="YES" textAlignment="«tv.textAlign.toString()»" text="«tv.content»" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="«tv.id»">
	                        «EXPAND uiControl FOR tv»
	                        «IF tv.textDecoration.matches("bold")-»
	                        <fontDescription key="fontDescription" type="boldSystem" pointSize="«tv.textSize»"/>
	                        «ELSEIF tv.textDecoration.matches("italic")-»
	                        <fontDescription key="fontDescription" type="italicSystem" pointSize="«tv.textSize»"/>
	                        «ELSE-»
	                        <fontDescription key="fontDescription" type="system" pointSize="«tv.textSize»"/>
	                        «ENDIF-»
	                        <color key="textColor" red="«redFromHex(tv.textColor)»" green="«greenFromHex(tv.textColor)»" blue="«blueFromHex(tv.textColor)»" alpha="1" colorSpace="calibratedRGB"/>
	                        <nil key="highlightedColor"/>
	                    </label>
	                    «ENDFOREACH-»
	                    «FOREACH vc.editTexts AS et-»
	                    <textField opaque="NO" clipsSubviews="YES" contentMode="scaleToFill" fixedFrame="YES" contentHorizontalAlignment="left" contentVerticalAlignment="center" borderStyle="roundedRect" placeholder="«et.placeholder»" textAlignment="natural" minimumFontSize="17" translatesAutoresizingMaskIntoConstraints="NO" text="«et.initialContent»" id="«et.id»">
	                        «EXPAND uiControl FOR et»
	                        <color key="textColor" red="«redFromHex(et.textColor)»" green="«greenFromHex(et.textColor)»" blue="«blueFromHex(et.textColor)»" alpha="1" colorSpace="calibratedRGB"/>
	                        <fontDescription key="fontDescription" type="system" pointSize="«et.textSize»"/>
	                        <textInputTraits key="textInputTraits"/>
	                    </textField>
	                    «ENDFOREACH-»
	                    «FOREACH vc.videoViews AS vv-»
	                    <webView contentMode="scaleToFill" fixedFrame="YES" translatesAutoresizingMaskIntoConstraints="NO" id="«vv.id»">
	                        «IF vv.sourceType.toString().matches("hardwareFile")»
	                        <color key="backgroundColor" white="0.0" alpha="1" colorSpace="calibratedWhite"/>
	                        «ENDIF»
	                        «EXPAND uiControl FOR vv»
	                    </webView>
	                    «ENDFOREACH-»
	                    «FOREACH vc.webViews AS wv-»
	                    <webView contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="«wv.id»">
	                    	«EXPAND uiControl FOR wv»
	                    	<color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="calibratedRGB"/>
	                    </webView>
	                    «ENDFOREACH-»
	                    «FOREACH vc.listViews AS lv-»
	                    <tableView clipsSubviews="YES" contentMode="scaleToFill" alwaysBounceVertical="YES" dataMode="prototypes" style="plain" rowHeight="57" sectionHeaderHeight="0.0" sectionFooterHeight="0.0" translatesAutoresizingMaskIntoConstraints="NO" id="«lv.id»">
	                        «EXPAND uiControl FOR lv»
	                        <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
	                        <prototypes>
	                        	«IF lv.listType.matches("detailed")-»
	                        	<tableViewCell clipsSubviews="YES" contentMode="scaleToFill" selectionStyle="blue" hidesAccessoryWhenEditing="NO" indentationWidth="0.0" reuseIdentifier="«lv.id»TableViewCell" rowHeight="57" id="«lv.id»CellID" customClass="DetailedTableViewCell" customModule="newApp" customModuleProvider="target">
	                        	«ELSEIF lv.listType.matches("image")-»
	                        	<tableViewCell clipsSubviews="YES" contentMode="scaleToFill" selectionStyle="blue" hidesAccessoryWhenEditing="NO" indentationWidth="0.0" reuseIdentifier="«lv.id»TableViewCell" rowHeight="57" id="«lv.id»CellID" customClass="ImageTableViewCell" customModule="newApp" customModuleProvider="target">
	                        	«ELSEIF lv.listType.matches("simple")-»
	                        	<tableViewCell clipsSubviews="YES" contentMode="scaleToFill" selectionStyle="blue" hidesAccessoryWhenEditing="NO" indentationWidth="0.0" reuseIdentifier="«lv.id»TableViewCell" rowHeight="57" id="«lv.id»CellID" customClass="SimpleTableViewCell" customModule="newApp" customModuleProvider="target">	                          
	                        	«ENDIF-»
	                                <rect key="frame" x="0.0" y="64" width="414" height="57"/>
                                    <autoresizingMask key="autoresizingMask"/>
	                                <tableViewCellContentView key="contentView" opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" tableViewCell="«lv.id»CellID" id="«lv.id»ContentViewID">
	                                    <rect key="frame" x="0.0" y="0.0" width="414" height="56"/>
                                        <autoresizingMask key="autoresizingMask"/>
	                                    <subviews>
	                                    	«IF lv.listType.matches("image") || lv.listType.matches("detailed")-»
                                            <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" translatesAutoresizingMaskIntoConstraints="NO" id="«lv.id»CellImageID">
                                                <rect key="frame" x="16" y="8" width="40" height="40"/>
                                                <constraints>
                                                    <constraint firstAttribute="width" constant="40" id="«lv.id»CellImageWidth"/>
                                                </constraints>
                                            </imageView>
                                            «ENDIF-»
                                            <label opaque="NO" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Label" textAlignment="natural" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="«lv.id»CellLabelID">
                                                <rect key="frame" x="72" y="8" width="288" height="40"/>
                                                <fontDescription key="fontDescription" type="system" pointSize="16"/>
                                                <color key="textColor" cocoaTouchSystemColor="darkTextColor"/>
                                                <nil key="highlightedColor"/>
                                            </label>
	                    					«IF lv.listType.matches("detailed")-»
                                            <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" translatesAutoresizingMaskIntoConstraints="NO" id="«lv.id»CellIconID">
                                                <rect key="frame" x="376" y="17" width="22" height="22"/>
                                                <constraints>
                                                    <constraint firstAttribute="width" constant="22" id="«lv.id»CellIconWidth"/>
                                                </constraints>
                                            </imageView>
                                            «ENDIF-»
                                        </subviews>
                                        <constraints>
                                        	«IF lv.listType.matches("detailed")-»
                                            <constraint firstItem="«lv.id»CellImageID" firstAttribute="leading" secondItem="«lv.id»ContentViewID" secondAttribute="leading" constant="16" id="«lv.id»ConstA"/>
                                            <constraint firstAttribute="bottom" secondItem="«lv.id»CellLabelID" secondAttribute="bottom" constant="8" id="«lv.id»ConstB"/>
                                            <constraint firstAttribute="bottom" secondItem="«lv.id»CellImageID" secondAttribute="bottom" constant="8" id="«lv.id»ConstC"/>
                                            <constraint firstItem="«lv.id»CellImageID" firstAttribute="top" secondItem="«lv.id»ContentViewID" secondAttribute="top" constant="8" id="«lv.id»ConstD"/>
                                            <constraint firstItem="«lv.id»CellLabelID" firstAttribute="top" secondItem="«lv.id»ContentViewID" secondAttribute="top" constant="8" id="«lv.id»ConstE"/>
                                            <constraint firstAttribute="bottom" secondItem="«lv.id»CellIconID" secondAttribute="bottom" constant="17" id="«lv.id»ConstF"/>
                                            <constraint firstAttribute="trailing" secondItem="«lv.id»CellIconID" secondAttribute="trailing" constant="16" id="«lv.id»ConstG"/>
                                            <constraint firstItem="«lv.id»CellLabelID" firstAttribute="leading" secondItem="«lv.id»CellImageID" secondAttribute="trailing" constant="16" id="«lv.id»ConstH"/>
                                            <constraint firstItem="«lv.id»CellIconID" firstAttribute="top" secondItem="«lv.id»ContentViewID" secondAttribute="top" constant="17" id="«lv.id»ConstI"/>
                                            <constraint firstItem="«lv.id»CellIconID" firstAttribute="leading" secondItem="«lv.id»CellLabelID" secondAttribute="trailing" constant="16" id="«lv.id»ConstJ"/>
                                        	«ELSEIF lv.listType.matches("image")-»
                                        	<constraint firstItem="«lv.id»CellImageID" firstAttribute="leading" secondItem="«lv.id»ContentViewID" secondAttribute="leading" constant="16" id="«lv.id»ConstA"/>
                                            <constraint firstItem="«lv.id»CellLabelID" firstAttribute="leading" secondItem="«lv.id»CellImageID" secondAttribute="trailing" constant="16" id="«lv.id»ConstB"/>
                                            <constraint firstAttribute="bottom" secondItem="«lv.id»CellLabelID" secondAttribute="bottom" constant="8" id="«lv.id»ConstC"/>
                                            <constraint firstItem="«lv.id»CellLabelID" firstAttribute="top" secondItem="«lv.id»ContentViewID" secondAttribute="top" constant="8" id="«lv.id»ConstD"/>
                                            <constraint firstAttribute="trailing" secondItem="«lv.id»CellLabelID" secondAttribute="trailing" constant="54" id="«lv.id»ConstE"/>
                                            <constraint firstItem="«lv.id»CellImageID" firstAttribute="top" secondItem="«lv.id»ContentViewID" secondAttribute="top" constant="8" id="«lv.id»ConstF"/>
                                            <constraint firstAttribute="bottom" secondItem="«lv.id»CellImageID" secondAttribute="bottom" constant="8" id="«lv.id»ConstG"/>
                                            «ELSEIF lv.listType.matches("simple")-»
                                            <constraint firstAttribute="bottom" secondItem="«lv.id»CellLabelID" secondAttribute="bottom" constant="8" id="«lv.id»ConstA"/>
                                            <constraint firstItem="«lv.id»CellLabelID" firstAttribute="leading" secondItem="«lv.id»ContentViewID" secondAttribute="leading" constant="16" id="«lv.id»ConstB"/>
                                            <constraint firstItem="«lv.id»CellLabelID" firstAttribute="top" secondItem="«lv.id»ContentViewID" secondAttribute="top" constant="8" id="«lv.id»ConstC"/>
                                            <constraint firstAttribute="trailing" secondItem="«lv.id»CellLabelID" secondAttribute="trailing" constant="16" id="«lv.id»ConstD"/>
                                            «ENDIF-»
                                        </constraints>
                                   	</tableViewCellContentView>
                                	<connections>
                                		«IF lv.listType.matches("detailed")-»
                                        <outlet property="icon" destination="«lv.id»CellIconID" id="«lv.id»IconOutlet"/>
                                        «ENDIF-»
                                        «IF lv.listType.matches("image") || lv.listType.matches("detailed")-»
                                        <outlet property="img" destination="«lv.id»CellImageID" id="«lv.id»ImageOutlet"/>
                                        «ENDIF-»
                                        <outlet property="label" destination="«lv.id»CellLabelID" id="«lv.id»LabelOutlet"/>
                                        «IF lv.clickListener!=null && lv.clickListener.navigation!=null»
			                    		<segue destination="«lv.clickListener.navigation.destination»ViewControllerID" kind="show" id="SegueIDFrom«lv.id»To«lv.clickListener.navigation.destination»ViewControllerID" identifier="SegueIdentifierFrom«lv.id»To«lv.clickListener.navigation.destination»ViewControllerID"/>
			                    		«ENDIF»
                                    </connections>
	                            </tableViewCell>
	                        </prototypes>
	                        <connections>
	                            <outlet property="dataSource" destination="«vc.name»ViewControllerID" id="«lv.id»DataSourceOutletID"/>
	                            <outlet property="delegate" destination="«vc.name»ViewControllerID" id="«lv.id»DelegateOutletID"/>
	                        </connections>
	                    </tableView>
	                    «ENDFOREACH-»
	                    
	                    «FOREACH vc.gridViews AS gv-»
	                    <collectionView opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" minimumZoomScale="0.0" maximumZoomScale="0.0" dataMode="prototypes" translatesAutoresizingMaskIntoConstraints="NO" id="«gv.id»">
	                        «EXPAND uiControl FOR gv»
	                        <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
	                        <collectionViewFlowLayout key="collectionViewLayout" minimumLineSpacing="5" minimumInteritemSpacing="5" id="«gv.id»FlowLayoutID">
	                            <size key="itemSize" width="202" height="202"/>
	                            <size key="headerReferenceSize" width="0.0" height="0.0"/>
	                            <size key="footerReferenceSize" width="0.0" height="0.0"/>
	                            <inset key="sectionInset" minX="0.0" minY="0.0" maxX="0.0" maxY="0.0"/>
	                        </collectionViewFlowLayout>
	                        <cells>
	                        	«IF gv.gridType.matches("detailed")-»
	                            <collectionViewCell opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" reuseIdentifier="«gv.id»CollectionViewCell" id="«gv.id»CellID" customClass="DetailedCollectionViewCell" customModule="newApp">
	                            «ELSEIF gv.gridType.matches("image")-»
	                            <collectionViewCell opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" reuseIdentifier="«gv.id»CollectionViewCell" id="«gv.id»CellID" customClass="ImageCollectionViewCell" customModule="newApp">
	                            «ELSEIF gv.gridType.matches("simple")-»
	                            <collectionViewCell opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" reuseIdentifier="«gv.id»CollectionViewCell" id="«gv.id»CellID" customClass="SimpleCollectionViewCell" customModule="newApp">
	                            «ENDIF-»
	                                <rect key="frame" x="0.0" y="0.0" width="202" height="202"/>
	                                <autoresizingMask key="autoresizingMask"/>
	                                <view key="contentView" opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center">
	                                    <rect key="frame" x="0.0" y="0.0" width="202" height="202"/>
	                                    <autoresizingMask key="autoresizingMask"/>
	                                    «IF gv.gridType.matches("detailed")-»
	                                    <subviews>
	                                    	<imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" translatesAutoresizingMaskIntoConstraints="NO" id="«gv.id»CellImageID">
                                                <rect key="frame" x="0.0" y="0.0" width="202" height="202"/>
                                            </imageView>
	                                        <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="«gv.id»CellViewID">
                                                <rect key="frame" x="0.0" y="158" width="202" height="44"/>
                                                <subviews>
                                                    <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" text="Label" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="«gv.id»CellLabelID">
                                                        <rect key="frame" x="10" y="14" width="182" height="16"/>
                                                        <fontDescription key="fontDescription" type="boldSystem" pointSize="16"/>
                                                        <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                                                        <nil key="highlightedColor"/>
                                                    </label>
                                                </subviews>
                                                <color key="backgroundColor" red="0.0" green="0.0" blue="0.0" alpha="0.39803340517241381" colorSpace="calibratedRGB"/>
                                                <constraints>
                                                    <constraint firstItem="«gv.id»CellLabelID" firstAttribute="top" secondItem="«gv.id»CellViewID" secondAttribute="top" constant="14" id="«gv.id»CellConstA"/>
                                                    <constraint firstAttribute="trailing" secondItem="«gv.id»CellLabelID" secondAttribute="trailing" constant="10" id="«gv.id»CellConstB"/>
                                                    <constraint firstAttribute="bottom" secondItem="«gv.id»CellLabelID" secondAttribute="bottom" constant="14" id="«gv.id»CellConstC"/>
                                                    <constraint firstItem="«gv.id»CellLabelID" firstAttribute="leading" secondItem="«gv.id»CellViewID" secondAttribute="leading" constant="10" id="«gv.id»CellConstD"/>
                                                    <constraint firstAttribute="height" constant="44" id="«gv.id»CellConstE"/>
                                                </constraints>
                                            </view>
	                                    </subviews>
	                                    «ELSEIF gv.gridType.matches("image")-»
	                                    <subviews>
                                            <imageView userInteractionEnabled="NO" contentMode="scaleToFill" horizontalHuggingPriority="251" verticalHuggingPriority="251" translatesAutoresizingMaskIntoConstraints="NO" id="«gv.id»CellImageID">
                                                <rect key="frame" x="0.0" y="0.0" width="202" height="202"/>
                                            </imageView>
                                        </subviews>
                                        «ELSEIF gv.gridType.matches("simple")-»
	                                    <subviews>
                                            <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="«gv.id»CellViewID">
                                                <rect key="frame" x="0.0" y="158" width="202" height="44"/>
                                                <subviews>
                                                    <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" text="Label" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" translatesAutoresizingMaskIntoConstraints="NO" id="«gv.id»CellLabelID">
                                                        <rect key="frame" x="10" y="14" width="182" height="16"/>
                                                        <fontDescription key="fontDescription" type="boldSystem" pointSize="16"/>
                                                        <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                                                        <nil key="highlightedColor"/>
                                                    </label>
                                                </subviews>
                                                <color key="backgroundColor" red="0.0" green="0.0" blue="0.0" alpha="0.39803340517241381" colorSpace="calibratedRGB"/>
                                                <constraints>
                                                    <constraint firstItem="«gv.id»CellLabelID" firstAttribute="top" secondItem="«gv.id»CellViewID" secondAttribute="top" constant="14" id="«gv.id»CellConstA"/>
                                                    <constraint firstAttribute="trailing" secondItem="«gv.id»CellLabelID" secondAttribute="trailing" constant="10" id="«gv.id»CellConstB"/>
                                                    <constraint firstAttribute="bottom" secondItem="«gv.id»CellLabelID" secondAttribute="bottom" constant="14" id="«gv.id»CellConstC"/>
                                                    <constraint firstItem="«gv.id»CellLabelID" firstAttribute="leading" secondItem="«gv.id»CellViewID" secondAttribute="leading" constant="10" id="«gv.id»CellConstD"/>
                                                    <constraint firstAttribute="height" constant="44" id="«gv.id»CellConstE"/>
                                                </constraints>
                                            </view>
                                        </subviews>
	                                    «ENDIF-»
	                                    <color key="backgroundColor" white="0.0" alpha="0.0" colorSpace="calibratedWhite"/>
	                                </view>
	                                <constraints>
	                                	«IF gv.gridType.matches("detailed")-»
                                        <constraint firstAttribute="trailing" secondItem="«gv.id»CellViewID" secondAttribute="trailing" id="«gv.id»ConstA"/>
                                        <constraint firstAttribute="trailing" secondItem="«gv.id»CellImageID" secondAttribute="trailing" id="«gv.id»ConstB"/>
                                        <constraint firstItem="«gv.id»CellImageID" firstAttribute="leading" secondItem="«gv.id»CellID" secondAttribute="leading" id="«gv.id»ConstC"/>
                                        <constraint firstItem="«gv.id»CellImageID" firstAttribute="top" secondItem="«gv.id»CellID" secondAttribute="top" id="«gv.id»ConstD"/>
                                        <constraint firstAttribute="bottom" secondItem="«gv.id»CellImageID" secondAttribute="bottom" id="«gv.id»ConstE"/>
                                        <constraint firstAttribute="bottom" secondItem="«gv.id»CellViewID" secondAttribute="bottom" id="«gv.id»ConstF"/>
                                        <constraint firstItem="«gv.id»CellViewID" firstAttribute="leading" secondItem="«gv.id»CellID" secondAttribute="leading" id="«gv.id»ConstG"/>
                                    	«ELSEIF gv.gridType.matches("image")-»
                                    	<constraint firstAttribute="trailing" secondItem="«gv.id»CellImageID" secondAttribute="trailing" id="«gv.id»ConstA"/>
                                        <constraint firstItem="«gv.id»CellImageID" firstAttribute="leading" secondItem="«gv.id»CellID" secondAttribute="leading" id="«gv.id»ConstB"/>
                                        <constraint firstItem="«gv.id»CellImageID" firstAttribute="top" secondItem="«gv.id»CellID" secondAttribute="top" id="«gv.id»ConstC"/>
                                        <constraint firstAttribute="bottom" secondItem="«gv.id»CellImageID" secondAttribute="bottom" id="«gv.id»ConstD"/>
                                        «ELSEIF gv.gridType.matches("simple")-»
                                        <constraint firstAttribute="trailing" secondItem="«gv.id»CellViewID" secondAttribute="trailing" id="«gv.id»ConstA"/>
                                        <constraint firstAttribute="bottom" secondItem="«gv.id»CellViewID" secondAttribute="bottom" id="«gv.id»ConstB"/>
                                        <constraint firstItem="«gv.id»CellViewID" firstAttribute="leading" secondItem="«gv.id»CellID" secondAttribute="leading" id="«gv.id»ConstC"/>
                                        «ENDIF-»    
                                    </constraints>
	                                <connections>
		                                «IF gv.gridType.matches("detailed") || gv.gridType.matches("simple")-»
		                                <outlet property="label" destination="«gv.id»CellLabelID" id="«gv.id»LabelOutlet"/>
		                                «ENDIF-»
		                                «IF gv.gridType.matches("image") || gv.gridType.matches("detailed")-»
		                                <outlet property="img" destination="«gv.id»CellImageID" id="«gv.id»ImageOutlet"/>
		                                «ENDIF-»
		                                «IF gv.clickListener!=null && gv.clickListener.navigation!=null»
			                    		<segue destination="«gv.clickListener.navigation.destination»ViewControllerID" kind="show" id="SegueIDFrom«gv.id»To«gv.clickListener.navigation.destination»ViewControllerID" identifier="SegueIdentifierFrom«gv.id»To«gv.clickListener.navigation.destination»ViewControllerID"/>
			                    		«ENDIF»
	                                </connections>
	                            </collectionViewCell>
	                        </cells>
	                        <connections>
	                        	<outlet property="dataSource" destination="«vc.name»ViewControllerID" id="«gv.id»DataSourceOutletID"/>
	                            <outlet property="delegate" destination="«vc.name»ViewControllerID" id="«gv.id»DelegateOutletID"/>
	                        </connections>
	                    </collectionView>
	                    «ENDFOREACH-»
	                </subviews>
	                <color key="backgroundColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
	                «EXPAND ios_templates::ViewConstraints::constraints FOR vc»
	            </view>
				<navigationItem key="navigationItem" id="«vc.name»ViewControllerNavigationItemID"/>
				<simulatedScreenMetrics key="simulatedDestinationMetrics" type="retina55"/>
	      		<connections>
	      			«FOREACH vc.buttons AS b-»
	                <outlet property="«b.id»" destination="«b.id»" id="«b.id»OutletID"/>
	                «ENDFOREACH-»
	      			«FOREACH vc.editTexts AS et-»
	                <outlet property="«et.id»" destination="«et.id»" id="«et.id»OutletID"/>
	                «ENDFOREACH-»
	      			«FOREACH vc.webViews AS wv-»
	                <outlet property="«wv.id»" destination="«wv.id»" id="«wv.id»OutletID"/>
	                «ENDFOREACH-»
	                «FOREACH vc.imageViews AS iv-»
	                «IF !iv.sourceType.toString().matches("localFile")-»
	                <outlet property="«iv.id»" destination="«iv.id»" id="«iv.id»OutletID"/>
	                «ENDIF-»
	                «ENDFOREACH-»
	                «FOREACH vc.videoViews AS vv-»
	                <outlet property="«vv.id»" destination="«vv.id»" id="«vv.id»OutletID"/>
	                «ENDFOREACH-»
	                «IF vc.audioRecorder!=null-»
	                <outlet property="recordButton" destination="«vc.audioRecorder.id»" id="«vc.audioRecorder.id»OutletID"/>
	                «ENDIF-»
	                «IF vc.map!=null-»
	                <outlet property="«vc.map.id»" destination="«vc.map.id»" id="«vc.map.id»OutletID"/>
	                «ENDIF-»
	                «FOREACH vc.listViews AS lv-»
	                <outlet property="«lv.id»" destination="«lv.id»" id="«lv.id»OutletID"/>
	                «ENDFOREACH-»
	                «FOREACH vc.gridViews AS gv-»
	                <outlet property="«gv.id»" destination="«gv.id»" id="«gv.id»OutletID"/>
	                «ENDFOREACH-»
	      		</connections>
	    	</viewController>
	    	<placeholder placeholderIdentifier="IBFirstResponder" id="«vc.name»PlaceholderID" userLabel="First Responder" sceneMemberID="firstResponder"/>
	  	</objects>
	</scene>
	«ENDFOREACH-»
	«REM»If Menu exists we generate the TabBarController«ENDREM»
	«IF menu != null && menu.menuItems.size > 0 -» 
	<!--Tab Bar Controller-->
    <scene sceneID="TabBarControllerSceneID">
        <objects>
            <tabBarController  automaticallyAdjustsScrollViewInsets="NO" id="TabBarControllerID" sceneMemberID="viewController">
            	<simulatedScreenMetrics key="simulatedDestinationMetrics" type="retina55"/>
                <tabBar key="tabBar" contentMode="scaleToFill" id="TabBarControllerTabBarID">
                    <autoresizingMask key="autoresizingMask"/>
                    <color key="backgroundColor" white="0.0" alpha="0.0" colorSpace="calibratedWhite"/>
                </tabBar>
                <connections>
                	«REM»For each menuItem we create a segue to the NavigationController of the corresponding referenced ViewController (If menu.menuItems.size==0 the Menu remains isolated on the StoryBoard (no segues))«ENDREM»
                	«FOREACH menu.menuItems AS i-»
                	<segue destination="«i.navigation.destination»ViewControllerNavNavigationControllerID" kind="relationship" relationship="viewControllers" id="«i.id»SegueID"/>
                	«ENDFOREACH-»
                </connections>
            </tabBarController>
            <placeholder placeholderIdentifier="IBFirstResponder" id="TabBarPlaceholderID" userLabel="First Responder" sceneMemberID="firstResponder"/>
        </objects>
    </scene>
    «REM»For each menuItem we create a NavigationController (which is the destination of the segue) for the referenced ViewController«ENDREM»
    «REM»This is done only to display the navigation bar as top bar«ENDREM»
    «FOREACH menu.menuItems AS i-»
    <!-- «i.navigation.destination» ViewControllerNav -->
	<scene sceneID="«i.navigation.destination»ViewControllerNavSceneID">
        <objects>
            <navigationController id="«i.navigation.destination»ViewControllerNavNavigationControllerID" sceneMemberID="viewController">
                <tabBarItem key="tabBarItem" title="«i.navigation.destination»" id="«i.navigation.destination»TabBarItemID"/>
                <toolbarItems/>
                <navigationBar key="navigationBar" contentMode="scaleToFill" id="«i.navigation.destination»ViewControllerNavNavigationBarID">
                    <rect key="frame" x="0.0" y="0.0" width="320" height="44"/>
                    <autoresizingMask key="autoresizingMask"/>
                </navigationBar>
                <nil name="viewControllers"/>
                <connections>
                    <segue destination="«i.navigation.destination»ViewControllerID" kind="relationship" relationship="rootViewController" id="SegueIDWithRoot«i.navigation.destination»ViewControllerID"/>
                </connections>
            </navigationController>
            <placeholder placeholderIdentifier="IBFirstResponder" id="«i.navigation.destination»ViewControllerPlaceholderID" userLabel="First Responder" sceneMemberID="firstResponder"/>
        </objects>
    </scene>
    «ENDFOREACH-»
	«ELSE-»
	«REM»In case of absence of the Menu or presence with menuItems.size==0 (Empty Menu) we create a NavigationController for the launcher ViewController«ENDREM»
	«FOREACH viewControllers AS vc-»
	«IF vc.launcher-»
	<!--«vc.name» Navigation Controller-->
	<scene sceneID="NavigationControllerSceneIDWithRoot«vc.name»ViewControllerID">
        <objects>
            <navigationController id="NavigationControllerIDWithRoot«vc.name»ViewControllerID" sceneMemberID="viewController">
                <toolbarItems/>
                <simulatedScreenMetrics key="simulatedDestinationMetrics" type="retina55"/>
                <navigationBar key="navigationBar" contentMode="scaleToFill" id="NavigationControllerBarIDWithRoot«vc.name»ViewControllerID">
                    <rect key="frame" x="0.0" y="0.0" width="320" height="44"/>
                    <autoresizingMask key="autoresizingMask"/>
                </navigationBar>
                <nil name="viewControllers"/>
                <connections>
                    <segue destination="«vc.name»ViewControllerID" kind="relationship" relationship="rootViewController" id="SegueIDWithRoot«vc.name»ViewControllerID"/>
                </connections>
            </navigationController>
            <placeholder placeholderIdentifier="IBFirstResponder" id="NavigationPlaceholderIDWithRoot«vc.name»ViewControllerID" userLabel="First Responder" sceneMemberID="firstResponder"/>
        </objects>
    </scene>
	«ENDIF-»
	«ENDFOREACH-»
	«ENDIF-»
	</scenes>
	<resources>
		«FOREACH viewControllers AS vc-»
		«FOREACH vc.imageViews AS iv-»
        «IF iv.sourceType.toString().matches("localFile") && !iv.fileUri.matches("")-»
        <image name="«iv.fileUri»" width="100" height="100"/>
        «ENDIF-»
        «ENDFOREACH-»
        «ENDFOREACH-»
        <image name="pause_icon.png" width="100" height="100"/>
        <image name="play_icon.png" width="100" height="100"/>
        <image name="stop_icon.png" width="100" height="100"/>
        <image name="list_img.png" width="100" height="100"/>
        <image name="list_icon.png" width="100" height="100"/>
        <image name="grid_image.png" width="100" height="100"/>
	</resources>
</document>
«ENDFILE-»

«ENDDEFINE-»

«DEFINE uiControl FOR UiControl-»
								<rect key="frame" x="«posX.toInteger()»" y="«posY.toInteger()+64»" width="«width.toInteger()»" height="«height.toInteger()»"/>
								<constraints>
									«EXPAND ios_templates::ViewConstraints::innerConstraints FOR this-»	
								</constraints>
«ENDDEFINE-»
