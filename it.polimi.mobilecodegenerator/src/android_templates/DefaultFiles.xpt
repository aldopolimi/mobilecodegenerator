«REM»
Copyright 2016 Gregorio Perego, Stefania Pezzetti, Aldo Pintus
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»

«EXTENSION app_extensions::Java»
«EXTENSION android_extensions::Java»

«DEFINE main FOR Application-»

«setApplicationName(name)»
«deleteApplicationFolder()»
«copyDefaultAndroidFiles()»
«copyUserFiles()»

«FILE name+"/mobile/"+"build.gradle"-»
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "«companyIdentifier».«name.toLowerCase()»"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	wearApp project(':wear')
	compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.android.support:design:23.2.1'
    compile 'com.google.android.gms:play-services:8.4.0'
    «IF viewControllers.cards.size > 0-»
    compile 'com.android.support:cardview-v7:23.3.0'
    «ENDIF-»
}
«ENDFILE-»

«FILE name+"/wear/"+"build.gradle"-»
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "«companyIdentifier».«name.toLowerCase()»"
        minSdkVersion 20
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.android.support:wearable:1.4.0'
    compile 'com.google.android.gms:play-services-wearable:8.4.0'
}
«ENDFILE-»

«FILE name+"/wear/src/main/java/"+companyIdentifier.replaceAll("\\.","/") +"/"+ name.toLowerCase() +"/"+ "MainActivity.java"-»
package «companyIdentifier».«name.toLowerCase()»;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.support.wearable.view.WatchViewStub;
import android.view.View;
import android.widget.Button;
import java.util.List;

public class MainActivity extends Activity {

	«IF smartwatch.voiceMessage == true-»
    private static final int SPEECH_REQUEST_CODE = 0;
    private static final String SPOKEN_TEXT = "spoken-text";
    private Button recButton;
    «ENDIF-»

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final WatchViewStub stub = (WatchViewStub) findViewById(R.id.watch_view_stub);
        stub.setOnLayoutInflatedListener(new WatchViewStub.OnLayoutInflatedListener() {
            @Override
            public void onLayoutInflated(WatchViewStub stub) {
				«IF smartwatch.voiceMessage == true-»
                recButton = (Button) stub.findViewById(R.id.rec_button);

                recButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        displaySpeechRecognizer();
                    }
                });
                «ENDIF-»
            }
        });
    }

	«IF smartwatch.voiceMessage == true-»
    private void displaySpeechRecognizer() {
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        startActivityForResult(intent, SPEECH_REQUEST_CODE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        String spokenText = "";
        if (requestCode == SPEECH_REQUEST_CODE && resultCode == RESULT_OK) {
            List<String> results = data.getStringArrayListExtra(
                    RecognizerIntent.EXTRA_RESULTS);
            spokenText = results.get(0);
        }

        Intent startIntent = new Intent(this, SendActivity.class);
        startIntent.putExtra(SPOKEN_TEXT, spokenText);
        startActivity(startIntent);

    }
    «ENDIF-»

}
«ENDFILE-»

«IF smartwatch.voiceMessage == true-»

«FILE name+"/wear/src/main/java/"+companyIdentifier.replaceAll("\\.","/") +"/"+ name.toLowerCase() +"/"+ "SendActivity.java"-»
package «companyIdentifier».«name.toLowerCase()»;

import android.app.Activity;
import android.os.Bundle;
import android.support.wearable.view.WatchViewStub;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.wearable.MessageApi;
import com.google.android.gms.wearable.Node;
import com.google.android.gms.wearable.NodeApi;
import com.google.android.gms.wearable.Wearable;

public class SendActivity extends Activity implements GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener {

    Node mNode;
    GoogleApiClient mGoogleApiClient;
    private static final String MESSAGE_PATH = "/wear-app-message";
    private boolean mResolvingError = false;
    private static final String SPOKEN_TEXT = "spoken-text";
    private TextView spokenText;
    private Button sendButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_send);

        //Connect the GoogleApiClient
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addApi(Wearable.API)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .build();

        final WatchViewStub stub = (WatchViewStub) findViewById(R.id.watch_view_stub);
        stub.setOnLayoutInflatedListener(new WatchViewStub.OnLayoutInflatedListener() {
            @Override
            public void onLayoutInflated(WatchViewStub stub) {

                final String message = getIntent().getStringExtra(SPOKEN_TEXT);

                spokenText = (TextView) stub.findViewById(R.id.spoken_text);
                spokenText.setText(message);

                sendButton = (Button) stub.findViewById(R.id.send_button);
                sendButton.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        sendMessage(message);
                    }
                });

            }
        });
    }

    /**
     * Send message to mobile handheld
     */
    private void sendMessage(String message) {

        final byte[] messageData = message.getBytes();

        if (mNode != null && mGoogleApiClient!=null && mGoogleApiClient.isConnected()) {
            Wearable.MessageApi.sendMessage(
                    mGoogleApiClient, mNode.getId(), MESSAGE_PATH, messageData).setResultCallback(

                    new ResultCallback<MessageApi.SendMessageResult>() {
                        @Override
                        public void onResult(MessageApi.SendMessageResult sendMessageResult) {

                            if (!sendMessageResult.getStatus().isSuccess()) {
                                Log.e("TAG", "Failed to send message with status code: "
                                        + sendMessageResult.getStatus().getStatusCode());
                            } else {
                                Log.i("TAG", "Successfully sent " + messageData.length + " bytes of data");
                            }
                        }
                    }
            );
        } else {
            //TODO
        }

        finish();

    }

    @Override
    protected void onStart() {
        super.onStart();
        if (!mResolvingError) {
            mGoogleApiClient.connect();
        }
    }

    /*
     * Resolve the node = the connected device to send the message to
     */
    private void resolveNode() {

        Wearable.NodeApi.getConnectedNodes(mGoogleApiClient).setResultCallback(new ResultCallback<NodeApi.GetConnectedNodesResult>() {
            @Override
            public void onResult(NodeApi.GetConnectedNodesResult nodes) {
                for (Node node : nodes.getNodes()) {
                    mNode = node;
                }
            }
        });
    }


    @Override
    public void onConnected(Bundle bundle) {
        resolveNode();
    }

    @Override
    public void onConnectionSuspended(int i) {
        //TODO
    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {
        //TODO
    }

}
«ENDFILE-»

«ENDIF-»

«FILE name+"/mobile/src/main/java/"+companyIdentifier.replaceAll("\\.","/") +"/"+ name.toLowerCase() +"/"+ "Utils.java"-»
package «companyIdentifier».«name.toLowerCase()»;
	
import java.io.*;
	
public final class Utils {
	/**
	 * Returns the text (string) contained in the Input Stream passed as parameter
	 * @param inputStream
	 * @return string
	 */
	public static String fromInputStreamToString(InputStream inputStream) {
		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
	    String readLine = "";
	    StringBuilder stringBuilder = new StringBuilder();
	    try {
	        while ((readLine = bufferedReader.readLine()) != null) {
	        	stringBuilder.append(readLine);
		    }
	        inputStream.close(); 
		    bufferedReader.close();
	    }
	    catch (IOException e) {
	        e.printStackTrace();
	    }
	    return stringBuilder.toString();
	}
}
«ENDFILE-»

«REM» If there's at least one ImageView with remote source, create ImageDownloadingTask.java «ENDREM»
«IF viewControllers.imageViews.sourceType.toString().contains("remoteFile")-»
«FILE this.name+"/mobile/src/main/java/"+this.companyIdentifier.replaceAll("\\.","/") +"/"+this.name.toLowerCase() +"/"+"ImageDownloadingTask.java"-»
package «this.companyIdentifier».«this.name.toLowerCase()»;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.widget.ImageView;

public class ImageDownloadingTask extends AsyncTask<ImageView, Void, Bitmap>{
	private ImageView imageView;
    private String imageUri;

    /**
     * This task attempts to download an image from the Network:
	 * in case of success, it sets the proper ImageView,
	 * in case of failure, it does nothing (ImageView remains without image).
     */
    public ImageDownloadingTask(){};
    
    /***
     * Attempts to download the image from the Network.
	 * @params params[0] = ImageView where to put the image to be downloaded. The url must be attached in a tag on the ImageView.
     */
    @Override
    protected Bitmap doInBackground(ImageView... params) {
        imageView = (ImageView) params[0];
        Bitmap bitmap = null;
        if(imageView!=null){
        	imageUri = imageView.getTag().toString();
			try {  
				bitmap = downloadImage(imageUri);
			}
			catch (MalformedURLException e) {
				e.printStackTrace();
			} 
			catch (IOException e) { //failure in downloading the image
				e.printStackTrace();
			} 
        }
        return bitmap;
    }
    
    /**
     * Attempts to download the image at the url passed as parameter: it returns the bitmap in case of success, null otherwise.
     * @param imageUrl
     */
    protected Bitmap downloadImage(String imageUrl) throws MalformedURLException, IOException{
    	HttpURLConnection connection = (HttpURLConnection) new URL(imageUrl).openConnection();
		connection.connect();
		Bitmap downloadedBitmap = BitmapFactory.decodeStream(connection.getInputStream()); //Convert to bitmap
		connection.disconnect();
		return downloadedBitmap;
    }
    
    /***
     * If the image has been downloaded properly it sets the ImageView.
     */
    @Override
    protected void onPostExecute(Bitmap bitmap) {
    	super.onPostExecute(bitmap);
        if(bitmap!=null){
        	String imageUri = imageView.getTag().toString();
        	if(this.imageUri.equals(imageUri)){ //needed for synchronization reasons
        		this.imageView.setImageBitmap(bitmap);
        	}
        }
    } 
}
«ENDFILE-»
«ENDIF-»

«REM» MyListAdapter.java «ENDREM»
«IF viewControllers.listViews.size!=0-»
«FILE name+"/mobile/src/main/java/"+companyIdentifier.replaceAll("\\.","/") +"/"+ name.toLowerCase() +"/"+ "MyListAdapter.java"-»
package «companyIdentifier».«name.toLowerCase()»;

import android.app.Activity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

public final class MyListAdapter extends ArrayAdapter<String> {

	private final Activity 	context;
	private final int		layoutId;
    private final String[] 	itemNames;
    private final Integer[] imgIds;
    private final Integer[] iconsIds;

	public MyListAdapter(Activity context, int layoutId, String[] itemNames) {
        super(context, layoutId, itemNames);
        this.context   	 = context;
        this.layoutId	 = layoutId;
        this.itemNames   = itemNames;
        this.imgIds      = null;
        this.iconsIds 	 = null;
    }
	
	public MyListAdapter(Activity context, int layoutId, String[] itemNames, Integer[] imgIds) {
        super(context, layoutId, itemNames);
        this.context   	 = context;
        this.layoutId	 = layoutId;
        this.itemNames   = itemNames;
        this.imgIds      = imgIds;
        this.iconsIds 	 = null;
    }
	
    public MyListAdapter(Activity context, int layoutId, String[] itemNames, Integer[] imgIds, Integer[] iconsIds) {
        super(context, layoutId, itemNames);
        this.context   	 = context;
        this.layoutId	 = layoutId;
        this.itemNames   = itemNames;
        this.imgIds      = imgIds;
        this.iconsIds 	 = iconsIds;
    }

    public View getView(int position, View view, ViewGroup parent) {
    	LayoutInflater inflater = context.getLayoutInflater();
        View rowView            = inflater.inflate(this.layoutId, null, true);

		try {
			TextView tv = (TextView) rowView
					.findViewById(R.id.listview_tv);
			tv.setText(itemNames[position]);
		} catch(Exception e) {
			e.printStackTrace();
		}

		try {
			ImageView iv = (ImageView) rowView
					.findViewById(R.id.listview_img);
			iv.setImageResource(imgIds[position]);
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			ImageView ic 	= (ImageView) rowView
					.findViewById(R.id.listview_ico);
			ic.setImageResource(iconsIds[position]);
		} catch (Exception e) {
			e.printStackTrace();
		}

        return rowView;
    }

}
«ENDFILE-»
«ENDIF-»

«REM» If there's at least one GridView, create MyGridAdapter.java and GridImageView.java«ENDREM»
«IF viewControllers.gridViews.size!=0-»
«FILE name+"/mobile/src/main/java/"+companyIdentifier.replaceAll("\\.","/") +"/"+ name.toLowerCase() +"/"+ "MyGridAdapter.java"-»
package «companyIdentifier».«name.toLowerCase()»;

import android.app.Activity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

public final class MyGridAdapter extends BaseAdapter {

    private final Activity context;
    private final int layoutId;
    private final String[] itemNames;
    private final Integer[] imgIds;

    public MyGridAdapter(Activity context, String[] itemNames) {
        this.context = context;
        this.layoutId = R.layout.my_grid_cell_simple;
        this.itemNames = itemNames;
        this.imgIds = null;
    }

    public MyGridAdapter(Activity context, Integer[] imgIds) {
        this.context = context;
        this.layoutId = R.layout.my_grid_cell_image;
        this.itemNames = null;
        this.imgIds = imgIds;
    }

    public MyGridAdapter(Activity context, String[] itemNames, Integer[] imgIds) {
        this.context = context;
        this.layoutId = R.layout.my_grid_cell_detailed;
        this.itemNames = itemNames;
        this.imgIds = imgIds;
    }

    @Override
    public int getCount() {
        if(this.layoutId == R.layout.my_grid_cell_image) {
            return this.imgIds.length;
        }
        return this.itemNames.length;
    }

    @Override
    public Object getItem(int position) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public long getItemId(int position) {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        LayoutInflater inflater = context.getLayoutInflater();
        View gridView = inflater.inflate(this.layoutId, null, true);

        if (this.layoutId == R.layout.my_grid_cell_simple) {
            TextView tv = (TextView) gridView
                    .findViewById(R.id.gridview_simple_tv);
            tv.setText(itemNames[position]);
        } else if (this.layoutId == R.layout.my_grid_cell_image) {
            ImageView iv = (ImageView) gridView
                    .findViewById(R.id.gridview_image_img);
            iv.setImageResource(imgIds[position]);
        } else if (this.layoutId == R.layout.my_grid_cell_detailed) {
            ImageView iv = (ImageView) gridView
                    .findViewById(R.id.gridview_detailed_img);
            iv.setImageResource(imgIds[position]);
            TextView tv = (TextView) gridView
                    .findViewById(R.id.gridview_detailed_tv);
            tv.setText(itemNames[position]);
        }

        return gridView;
    }
}
«ENDFILE-»

«FILE name+"/mobile/src/main/java/"+companyIdentifier.replaceAll("\\.","/") +"/"+ name.toLowerCase() +"/"+ "GridImageView.java"-»
package «companyIdentifier».«name.toLowerCase()»;

import android.content.Context;
import android.util.AttributeSet;
import android.widget.ImageView;

public class GridImageView extends ImageView {
    public GridImageView(Context context) {
        super(context);
    }

    public GridImageView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public GridImageView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        setMeasuredDimension(getMeasuredWidth(), getMeasuredWidth()); //Snap to width
    }

}
«ENDFILE-»
«ENDIF-»

«ENDDEFINE-»